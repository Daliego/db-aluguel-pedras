
-- Funções

/*
========================================
||                                    ||
||      Função para Validar CPF       ||
||                                    ||
========================================
*/
CREATE OR REPLACE FUNCTION VALIDAR_CPF(CPF VARCHAR(11)) 
RETURNS VOID AS 
$$

DECLARE
	CPF_ARRAY INT[] := STRING_TO_ARRAY(CPF, NULL);
	VALOR_DIGITO_1 INT := 0;
	VALOR_DIGITO_2 INT := 0;

BEGIN
	IF LENGTH(CPF) != 11 THEN
		RAISE EXCEPTION 'CPF INVÁLIDO. O CAMPO DEVE POSSUIR 11 DÍGITOS!';
	END IF;
	
	FOR I IN 1..9 LOOP
		VALOR_DIGITO_1 := VALOR_DIGITO_1 + CPF_ARRAY[I] * (11 - I);
	END LOOP;
	
	VALOR_DIGITO_1 := 11 - (VALOR_DIGITO_1 % 11);
	
	IF VALOR_DIGITO_1 > 9 THEN
		VALOR_DIGITO_1 := 0;
	END IF;
		
	FOR I IN 1..10 LOOP
		VALOR_DIGITO_2 := VALOR_DIGITO_2 + CPF_ARRAY[I] * (12 - I);
	END LOOP;
	
	VALOR_DIGITO_2 := 11 - (VALOR_DIGITO_2 % 11);
	
	IF VALOR_DIGITO_2 > 9 THEN
		VALOR_DIGITO_2 = 0;
	END IF;
	
	IF VALOR_DIGITO_1 != CPF_ARRAY[10] OR VALOR_DIGITO_2 != CPF_ARRAY[11] THEN
		RAISE EXCEPTION 'CPF INVÁLIDO. DÍGITOS VERIFICADORES INVÁLIDOS!';
	END IF;
	
	RAISE LOG 'CERTO!';
	
END;

$$ LANGUAGE 'plpgsql';


/*
========================================
||                                    ||
||      Função para Validar CNPJ      ||
||                                    ||
========================================
*/

CREATE OR REPLACE FUNCTION VALIDAR_CNPJ(CNPJ VARCHAR(14))
  RETURNS VOID AS $$
DECLARE
  CNPJ_ARRAY INT[14] := STRING_TO_ARRAY(CNPJ, NULL);
  sum INT := 0;
  mod INT;
  SOMA_DIGITO_1 INT := 0;
  DIGITO_1 INT;
  SOMA_DIGITO_2 INT := 0;
  DIGITO_2 INT;
BEGIN
  IF LENGTH(CNPJ) != 14 THEN
    RAISE EXCEPTION 'CNPJ INVÁLIDO. CNPJ PRECISA CONTER 14 CARACTERES.';
    
  END IF;

  SOMA_DIGITO_1 := CNPJ_ARRAY[1]*5 + CNPJ_ARRAY[2]*4 + CNPJ_ARRAY[3]*3 + CNPJ_ARRAY[4]*2
        + CNPJ_ARRAY[5]*9 + CNPJ_ARRAY[6]*8 + CNPJ_ARRAY[7]*7 + CNPJ_ARRAY[8]*6
        + CNPJ_ARRAY[9]*5 + CNPJ_ARRAY[10]*4 + CNPJ_ARRAY[11]*3 + CNPJ_ARRAY[12]*2;
  DIGITO_1 := (SOMA_DIGITO_1 % 11);
  DIGITO_1 := CASE WHEN DIGITO_1 < 2 THEN 0 ELSE 11 - DIGITO_1 END;

  SOMA_DIGITO_2 := CNPJ_ARRAY[1]*6 + CNPJ_ARRAY[2]*5 + CNPJ_ARRAY[3]*4 + CNPJ_ARRAY[4]*3
         + CNPJ_ARRAY[5]*2 + CNPJ_ARRAY[6]*9 + CNPJ_ARRAY[7]*8 + CNPJ_ARRAY[8]*7
         + CNPJ_ARRAY[9]*6 + CNPJ_ARRAY[10]*5 + CNPJ_ARRAY[11]*4 + CNPJ_ARRAY[12]*3
         + CNPJ_ARRAY[13]*2;
  DIGITO_2 := (SOMA_DIGITO_2 % 11);
  DIGITO_2 := CASE WHEN DIGITO_2 < 2 THEN 0 ELSE 11 - DIGITO_2 END;

  IF CNPJ_ARRAY[13] != DIGITO_1 OR CNPJ_ARRAY[14] != DIGITO_2 THEN
    RAISE EXCEPTION 'CNPJ INVÁLIDO. DIGÍTOS VERIFICADORES INVÁLIDOS.';
  END IF;
END;
$$ LANGUAGE 'plpgsql';


/*
============================================
||                                    	  ||
||      Função para Validar TELEFONE      ||
||                                        ||
============================================
*/

CREATE OR REPLACE FUNCTION VALIDAR_TELEFONE(_TELEFONE VARCHAR(11))
RETURNS VOID
AS $$
BEGIN
	IF LENGTH(_TELEFONE) != 11 THEN
		RAISE EXCEPTION 'INVALID PHONE';
	END IF;
END;
$$
LANGUAGE 'plpgsql';


-- SELECT * FROM VALIDAR_TELEFONE('86999717036');
/*
=========================================
||                                     ||
||      Função para Validar EMAIL      ||
||                                     ||
=========================================
*/

CREATE OR REPLACE FUNCTION VALIDAR_EMAIL(_EMAIL VARCHAR(100))
RETURNS VOID
AS $$
BEGIN
	IF NOT _EMAIL ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$' THEN
		RAISE EXCEPTION 'EMAIL INVALIDO. %', _EMAIL;
	END IF;
END;
$$ LANGUAGE 'plpgsql';

-- SELECT * FROM VALIDAR_EMAIL('romeromendonca22@gmail.com');
/*


/*
=========================================
||                                     ||
||      Função para Validar Datas      ||
||                                     ||
=========================================
*/

CREATE OR REPLACE FUNCTION PRIVATE_VALIDAR_DATAS(_DATA_INICIAL DATE, _DATA_FINAL DATE) 
RETURNS VOID AS $$
	BEGIN

		IF(_DATA_INICIAL IS NULL OR _DATA_FINAL IS NULL) THEN
			RAISE EXCEPTION 'AS DATAS NÃO PODEM SER VAZIAS';
		END IF;
		IF(_DATA_INICIAL < CURRENT_DATE OR _DATA_FINAL < CURRENT_DATE) THEN
			RAISE EXCEPTION 'AS DATAS NÃO PODEM SER INFERIORES A %', CURRENT_DATE;
		END IF;

		IF _DATA_FINAL < _DATA_INICIAL THEN
			RAISE EXCEPTION 'DATA FINAL NÃO PODE SER MENOR QUE A DATA FINAL';
		END IF;


	END;

$$ LANGUAGE 'plpgsql';


/*
========================================
||                                    ||
||      Função Cadastrar Parceiro     ||
||                                    ||
========================================
*/
CREATE OR REPLACE FUNCTION CADASTRAR_PARCEIRO(_NOME TEXT, _CPF_CNPJ VARCHAR(14), _TELEFONE TEXT, _EMAIL TEXT, _ENDERECO TEXT, _TIPO_PESSOA INT ) 
RETURNS VOID AS $$
	BEGIN
		INSERT INTO PARCEIRO VALUES 
		(DEFAULT, _NOME, _CPF_CNPJ, _TELEFONE, _EMAIL, _ENDERECO, _TIPO_PESSOA);
	END;
$$ LANGUAGE 'plpgsql';

-- SELECT * FROM CADASTRAR_PARCEIRO('ROMERO ANTONIO', '10030812313', '86999971736', 'romeromendonca@22gmail.com', 'RUA DAS LESMAS', 1);

/*
========================================
||                                    ||
||       Função para Realizar         ||
||              Pedido                ||
========================================
*/
CREATE OR REPLACE FUNCTION PRIVATE_CRIAR_PEDIDO( 
	_ID_PARCEIRO INT, 
	_ID_ANALISTA INT
	) RETURNS INT AS $$
	DECLARE VAR_ID_PEDIDO INT;
	BEGIN
		INSERT INTO PEDIDO(
			ID_PARCEIRO, ID_ANALISTA
		) VALUES (
			_ID_PARCEIRO, _ID_ANALISTA
		) RETURNING ID_PEDIDO INTO VAR_ID_PEDIDO;
		RAISE NOTICE 'PEDIDO % CRIADO COM SUCESSO', VAR_ID_PEDIDO;
		RETURN VAR_ID_PEDIDO;
	END

$$ LANGUAGE 'plpgsql';

/*
========================================
||                                    ||
||       Função para Visualizar       ||
||        Pedras Disponíveis          ||
========================================
*/

CREATE OR REPLACE FUNCTION VER_PEDRAS_DISPONIVEIS(
	_DATA_INICIAL DATE, 
	_DATA_FINAL DATE
	) RETURNS TABLE (DESCRICAO_PEDRA VARCHAR(100), ID_PEDRA INT) AS $$
	BEGIN

	PERFORM PRIVATE_VALIDAR_DATAS(_DATA_INICIAL, _DATA_FINAL);
	RETURN QUERY SELECT PEDRA.DESCRICAO_PEDRA, PEDRA.ID_PEDRA FROM (
		SELECT * FROM VER_PEDRAS_OCUPADAS(_DATA_INICIAL, _DATA_FINAL)
	) AS PEDRAS_OCUPADAS 
	RIGHT JOIN PEDRA 
	ON PEDRAS_OCUPADAS.ID_PEDRA = PEDRA.ID_PEDRA 
	WHERE PEDRAS_OCUPADAS.ID_PEDIDO ISNULL 
	ORDER BY PEDRA.DESCRICAO_PEDRA;

	END

$$  LANGUAGE 'plpgsql';


/*
========================================
||                                    ||
||       Função para Visualizar       ||
||          Pedras Ocupadas           ||
========================================
*/


CREATE OR REPLACE FUNCTION VER_PEDRAS_OCUPADAS(_DATA_INICIAL DATE, _DATA_FINAL DATE) 
RETURNS SETOF LISTA_PEDRAS_PEDIDO AS $$
	BEGIN

	PERFORM PRIVATE_VALIDAR_DATAS(_DATA_INICIAL, _DATA_FINAL);
	RETURN QUERY SELECT * FROM LISTA_PEDRAS_PEDIDO 
		WHERE _DATA_INICIAL BETWEEN DATA_INICIAL AND DATA_FINAL  OR _DATA_FINAL BETWEEN DATA_INICIAL AND DATA_FINAL;
	END;

$$ LANGUAGE 'plpgsql';



/*
========================================
||                                    ||
||       Função para Adicionar        ||
||          Pedra ao Pedido           ||
========================================
*/

CREATE OR REPLACE FUNCTION ADD_ITEM(
	_ID_PEDRA INT, 
	_DATA_INICIAL DATE, 
	_DATA_FINAL DATE,
	_ID_PEDIDO INT DEFAULT NULL,
	_CPF_CNPJ TEXT DEFAULT NULL
	) RETURNS SETOF LISTA_PEDRAS_PEDIDO AS $$
	DECLARE
	VAR_ID_ANALISTA INT;
	VAR_ID_PARCEIRO INT;
	VAR_ID_PEDIDO INT;

	BEGIN
		SELECT ID_ANALISTA INTO VAR_ID_ANALISTA FROM ANALISTA WHERE CPF_ANALISTA = '33879710368'; -- ADICONAR CONTROLE DE USUARIO

		SELECT ID_PARCEIRO INTO VAR_ID_PARCEIRO FROM PARCEIRO WHERE CPF_CNPJ = _CPF_CNPJ;

		IF _ID_PEDRA NOT IN (SELECT ID_PEDRA FROM VER_PEDRAS_DISPONIVEIS(_DATA_INICIAL, _DATA_FINAL)) THEN
			RAISE EXCEPTION 'A PEDRA NÃO ESTÁ DISPONÍVEL NO INTERVALO ESCOLHIDO';
		END IF;

		IF _ID_PEDIDO IS NULL THEN
			SELECT PRIVATE_CRIAR_PEDIDO INTO VAR_ID_PEDIDO FROM PRIVATE_CRIAR_PEDIDO(VAR_ID_PARCEIRO, VAR_ID_ANALISTA);
		END IF;
		INSERT INTO LISTA_PEDRAS_PEDIDO VALUES (_ID_PEDRA, COALESCE(_ID_PEDIDO, VAR_ID_PEDIDO), _DATA_INICIAL, _DATA_FINAL);
		RAISE NOTICE 'PEDRA ADICIONADA AO PEDIDO Nº %',VAR_ID_PEDIDO;

		RETURN QUERY SELECT * FROM LISTA_PEDRAS_PEDIDO WHERE ID_PEDIDO = COALESCE(_ID_PEDIDO, VAR_ID_PEDIDO);
	END;
$$ LANGUAGE 'plpgsql';


/*
========================================
||                                    ||
||       Função para Remover          ||
||          Pedra ao Pedido           ||
========================================
*/

CREATE OR REPLACE FUNCTION REMOVER_ITEM(_ID_PEDIDO INT, _ID_PEDRA INT) RETURNS VOID AS $$
	BEGIN
		IF EXISTS (SELECT * FROM LISTA_PEDRAS_PEDIDO WHERE ID_PEDIDO = _ID_PEDIDO AND ID_PEDRA = _ID_PEDRA) THEN
			DELETE FROM LISTA_PEDRAS_PEDIDO WHERE ID_PEDIDO = _ID_PEDIDO AND ID_PEDRA = _ID_PEDRA;
			RETURN;
		END IF;

		RAISE EXCEPTION 'PEDRA NÃO ENCONTRA NO PEDIDO %', _ID_PEDIDO;

	END;
$$ LANGUAGE 'plpgsql';




/*
========================================
||                                    ||
||     Função para Atualizar          ||
||  Datas das Pedras Selecionadas     ||
========================================
*/


CREATE OR REPLACE FUNCTION ATUALIZAR_DATA_PEDRA(
	_ID_PEDIDO INT, _ID_PEDRA INT, 
	_DATA_INICIAL DATE DEFAULT NULL, _DATA_FINAL DATE DEFAULT NULL
	) RETURNS SETOF LISTA_PEDRAS_PEDIDO AS $$
	DECLARE 
	VAR_DATA_INICIAL_ATUAL DATE;
	VAR_DATA_FINAL_ATUAL DATE;
	BEGIN
		SELECT DATA_INICIAL, DATA_FINAL INTO VAR_DATA_INICIAL_ATUAL, VAR_DATA_FINAL_ATUAL FROM LISTA_PEDRAS_PEDIDO WHERE ID_PEDIDO = _ID_PEDIDO AND ID_PEDRA = _ID_PEDRA;

		IF EXISTS (SELECT * FROM LISTA_PEDRAS_PEDIDO WHERE ID_PEDIDO = _ID_PEDIDO AND ID_PEDRA = _ID_PEDRA) THEN
			IF _ID_PEDRA IN (SELECT ID_PEDRA FROM VER_PEDRAS_DISPONIVEIS(COALESCE(_DATA_INICIAL, VAR_DATA_INICIAL_ATUAL), COALESCE(_DATA_FINAL, VAR_DATA_FINAL_ATUAL))) 
			OR (SELECT COUNT(*) FROM (SELECT * FROM VER_PEDRAS_OCUPADAS(COALESCE(_DATA_INICIAL, VAR_DATA_INICIAL_ATUAL), COALESCE(_DATA_FINAL, VAR_DATA_FINAL_ATUAL)) WHERE ID_PEDRA = _ID_PEDRA) AS TABR) = 1 THEN
				UPDATE LISTA_PEDRAS_PEDIDO SET DATA_INICIAL = COALESCE(_DATA_INICIAL, DATA_INICIAL), DATA_FINAL = COALESCE(_DATA_FINAL, DATA_FINAL) WHERE ID_PEDIDO = _ID_PEDIDO AND ID_PEDRA = _ID_PEDRA;
			ELSE
				RAISE EXCEPTION 'A PEDRA SELECIONADA NÃO ESTA DISPONÍVEL NO NOVO INTERVALO';
			
			END IF;
		ELSE
			RAISE EXCEPTION 'A PEDRA SELECIONADA NÃO FOI ADICIONADA AO PEDIDO';
		END IF;
		RAISE NOTICE 'DATAS ATUALIZADAS COM SUCESSO!';
		RETURN QUERY SELECT * FROM LISTA_PEDRAS_PEDIDO WHERE ID_PEDIDO = _ID_PEDIDO AND ID_PEDRA = _ID_PEDRA;
	END;
$$ LANGUAGE 'plpgsql';



/*
=====================================
||        Função para Fazer 	   ||
||       Pagamento do Aluguel      ||
||                                 ||
=====================================
*/


CREATE OR REPLACE FUNCTION PAGAR_PEDIDO(_ID_PEDIDO INT, _METODO_PAGAMENTO INT)
RETURNS SETOF PEDIDO AS $$
	DECLARE 
	VAR_NUMERO_NOTA UUID;
	VAR_MAX_DATA_FINAL DATE;

	BEGIN
		IF NOT EXISTS (SELECT * FROM LISTA_PEDRAS_PEDIDO WHERE ID_PEDIDO = _ID_PEDIDO) THEN
			RAISE EXCEPTION 'O PEDIDO ESTÁ VAZIO';
		END IF;
		SELECT NUMERO_NOTA INTO VAR_NUMERO_NOTA FROM PEDIDO WHERE ID_PEDIDO = _ID_PEDIDO;
		IF(VAR_NUMERO_NOTA IS NOT NULL) THEN
			RAISE EXCEPTION 'O PEDIDO JÁ FOI PAGO';
		END IF;

		SELECT MAX(DATA_FINAL) INTO VAR_MAX_DATA_FINAL FROM LISTA_PEDRAS_PEDIDO WHERE ID_PEDIDO = _ID_PEDIDO;
		UPDATE PEDIDO SET DATA_VENCIMENTO_PAGAMENTO_COMISSAO =(VAR_MAX_DATA_FINAL + 10)::TIMESTAMP WHERE ID_PEDIDO = _ID_PEDIDO;
		

		UPDATE PEDIDO SET 
		ID_METODO_PAGAMENTO = _METODO_PAGAMENTO, 
		DATA_PAGAMENTO = NOW(),
		NUMERO_NOTA = gen_random_uuid() WHERE ID_PEDIDO = _ID_PEDIDO;
		
		RAISE NOTICE 'PEDIDO PAGO COM SUCESSO!';
		RETURN QUERY SELECT * FROM PEDIDO WHERE ID_PEDIDO = _ID_PEDIDO;
	END;
$$
LANGUAGE 'plpgsql';


/*
=====================================
||           Função para       	   ||
||      Atualizar faturamento      ||
||                                 ||
=====================================
*/
CREATE OR REPLACE FUNCTION FATURAR_PEDRA(_ID_PEDIDO INT, _ID_PEDRA INT, _VALOR NUMERIC(10,2)) 
RETURNS SETOF LISTA_PEDRAS_PEDIDO AS $$
	BEGIN
		IF EXISTS (SELECT * FROM LISTA_PEDRAS_PEDIDO WHERE ID_PEDIDO = _ID_PEDIDO AND ID_PEDRA = _ID_PEDRA) THEN
			UPDATE LISTA_PEDRAS_PEDIDO SET FATURAMENTO = FATURAMENTO + _VALOR WHERE ID_PEDIDO = _ID_PEDIDO AND ID_PEDRA = _ID_PEDRA;
			RAISE NOTICE 'FATURAMENTO REGISTRADO';
			RETURN QUERY SELECT * FROM LISTA_PEDRAS_PEDIDO WHERE ID_PEDIDO = _ID_PEDIDO AND ID_PEDRA = _ID_PEDRA;
		ELSE
			RAISE EXCEPTION 'PEDRA NÃO ENCONTRADA NO PEDIDO';
		END IF;
	END;
$$ LANGUAGE 'plpgsql';

SELECT * FROM FATURAR_PEDRA(2, 2, 20.00)



/*
=====================================
||           Função para       	   ||
||      Atualizar faturamento      ||
||                                 ||
=====================================
*/

CREATE OR REPLACE FUNCTION MULTAR_PEDIDO(_ID_PEDIDO INT,  _VALOR_MULTA NUMERIC(10,2), _DESCRICAO TEXT) 
RETURNS SETOF MULTA AS $$
	DECLARE VAR_ID_MULTA INT;
	BEGIN
		IF EXISTS (SELECT * FROM PEDIDO WHERE ID_PEDIDO = _ID_PEDIDO) THEN
			INSERT INTO MULTA VALUES(DEFAULT, _DESCRICAO, _ID_PEDIDO, _VALOR_MULTA) 
			RETURNING ID_MULTA INTO VAR_ID_MULTA;
			RAISE NOTICE 'MULTA REGISTRADA';

			RETURN QUERY SELECT * FROM MULTA WHERE ID_MULTA = VAR_ID_MULTA;
		ELSE 
			RAISE EXCEPTION 'PEDIDO NÃO EXISTENTE';
		END IF;
	END;
$$ LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION VERIFICAR_MULTAS(_CPF_CNPJ TEXT) 
RETURNS SETOF MULTA AS $$
	DECLARE VAR_ID_PARCEIRO INT;
	BEGIN
		IF EXISTS (SELECT ID_PARCEIRO FROM PARCEIRO WHERE CPF_CNPJ = _CPF_CNPJ) THEN
			SELECT ID_PARCEIRO INTO VAR_ID_PARCEIRO FROM PARCEIRO WHERE CPF_CNPJ = _CPF_CNPJ;
			IF EXISTS (SELECT MULTA.* FROM MULTA NATURAL JOIN PEDIDO WHERE ID_PARCEIRO = VAR_ID_PARCEIRO AND DATA_PAGAMENTO_MULTA ISNULL) THEN
				RETURN QUERY SELECT MULTA.* FROM MULTA NATURAL JOIN PEDIDO WHERE ID_PARCEIRO = VAR_ID_PARCEIRO AND DATA_PAGAMENTO_MULTA ISNULL;
			ELSE
				RAISE NOTICE 'NÃO HÁ MULTAS PARA O PARCEIRO SELECIONADO';
			END IF;

		ELSE
			RAISE EXCEPTION 'PARCEIRO NÃO EXISTE';
		END IF; 
	END;

$$ LANGUAGE 'plpgsql';